/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { id 'org.apache.beam.module' }
applyDockerNature()
applyGoNature()

description = "Apache Beam :: SDKs :: Rust :: Container"

goBuild {
  goTargets = '*.go' // only build the immediate directory.
  outputLocation = './build/target/${GOOS}_${GOARCH}/boot'
}

docker {
  name containerImageName(
          name: project.docker_image_default_repo_prefix + "rust_sdk",
          root: project.rootProject.hasProperty(["docker-repository-root"]) ?
                  project.rootProject["docker-repository-root"] :
                  project.docker_image_default_repo_root,
          tag: project.rootProject.hasProperty(["docker-tag"]) ?
                  project.rootProject["docker-tag"] : project.sdk_version)
  // tags used by dockerTag task
  tags containerImageTags()
  files "./build"
  buildArgs(['pull_licenses': project.rootProject.hasProperty(["docker-pull-licenses"]) ||
                     project.rootProject.hasProperty(["isRelease"])])
}

dockerPrepare.dependsOn goBuild

if (project.rootProject.hasProperty(["docker-pull-licenses"])) {
  def copyGolangLicenses = tasks.register("copyGolangLicenses", Copy) {
    from "${project(':release:go-licenses:py').buildDir}/output"
    into "build/target/go-licenses"
    dependsOn ':release:go-licenses:py:createLicenses'
  }
  dockerPrepare.dependsOn copyGolangLicenses
} else {
  def skipPullLicenses = tasks.register("skipPullLicenses", Exec) {
    executable "sh"
    args "-c", "mkdir -p build/target/go-licenses"
  }
  dockerPrepare.dependsOn skipPullLicenses
}

task pushAll {
  dependsOn ":sdks:rust:container:dockerPush"
}
